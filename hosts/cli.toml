# cli.toml - Shared CLI Tools Manifest
#
# This manifest defines CLI tools that are the same across all platforms.
# Platform-specific manifests (macos.toml, linux.toml) can override these
# or add additional platform-specific applications.
#
# Supported installer: ubi (Universal Binary Installer for GitHub releases)
#
# Usage:
#   dev app install helix
#   dev app install --all
#   dev app status --all
#   dev app update --all

# =============================================================================
# Text Editors & Development Tools
# =============================================================================

[helix]
installer = "ubi"
project = "helix-editor/helix"
bin = ["hx"]
symlinks = ["contrib/completion/hx.zsh:${XDG_DATA_HOME}/zsh/completions/_hx"]
status_cmd = "hx --version"
# Note: Helix runtime is included in the extracted archive

[marksman]
installer = "ubi"
project = "artempyanykh/marksman"

[shfmt]
installer = "ubi"
project = "mvdan/sh"

[taplo]
installer = "ubi"
project = "tamasfe/taplo"

# =============================================================================
# GitHub & Git Tools
# =============================================================================

[gh]
installer = "ubi"
project = "cli/cli"
bin = ["bin/gh"]

[serie]
installer = "ubi"
project = "lusingander/serie"

# =============================================================================
# AI & Code Generation Tools
# =============================================================================

[claude]
installer = "curl"
url = "https://claude.ai/install.sh"
shell = "bash"  # Claude's installer requires bash
update_cmd = "claude update"
# Note: Claude Code CLI hardcodes ~/.claude for data storage

[codex]
installer = "ubi"
project = "openai/codex"

# =============================================================================
# Search & File Tools
# =============================================================================

[bat]
installer = "ubi"
project = "sharkdp/bat"
bin = ["bat"]
symlinks = [
  "bat.1:${XDG_DATA_HOME}/man/man1/bat.1",
  "autocomplete/bat.zsh:${XDG_DATA_HOME}/zsh/completions/_bat"
]

[fd]
installer = "ubi"
project = "sharkdp/fd"
bin = ["fd"]
symlinks = [
  "fd.1:${XDG_DATA_HOME}/man/man1/fd.1",
  "autocomplete/_fd:${XDG_DATA_HOME}/zsh/completions/_fd"
]

[ripgrep]
installer = "ubi"
project = "BurntSushi/ripgrep"
bin = ["rg"]
symlinks = [
  "doc/rg.1:${XDG_DATA_HOME}/man/man1/rg.1",
  "complete/_rg:${XDG_DATA_HOME}/zsh/completions/_rg"
]

# =============================================================================
# Data Processing Tools
# =============================================================================

[jq]
installer = "ubi"
project = "jqlang/jq"

[yq]
installer = "ubi"
project = "mikefarah/yq"
bin = ["yq"]
symlinks = ["yq.1:${XDG_DATA_HOME}/man/man1/yq.1"]
# Note: install.sh bootstraps yq binary-only for manifest parsing
# This full install adds man pages and proper directory structure
# Binary name is auto-detected (yq_darwin_arm64, yq_linux_amd64, etc.)

# =============================================================================
# System Monitoring Tools
# =============================================================================

[fastfetch]
installer = "ubi"
project = "fastfetch-cli/fastfetch"
bin = ["usr/bin/fastfetch", "usr/bin/flashfetch"]
symlinks = [
  "usr/share/man/man1/fastfetch.1:${XDG_DATA_HOME}/man/man1/fastfetch.1",
  "usr/share/zsh/site-functions/_fastfetch:${XDG_DATA_HOME}/zsh/completions/_fastfetch"
]

# =============================================================================
# Security & Signing Tools
# =============================================================================

[cosign]
installer = "ubi"
project = "sigstore/cosign"
status_cmd = "cosign version 2>&1 | grep GitVersion"
