#!/bin/sh

# devlog - Standard logging helper for dev scripts
#
# Usage:
#   devlog <message>                 - Log message with default (info) level
#   devlog info <label> [message]    - Info message (default)
#   devlog warn <label> [message]    - Warning message (yellow label)
#   devlog error <label> [message]   - Error message (red label, stderr)
#   devlog debug <label> [message]   - Log only if VERBOSE=1
#
# Environment Variables:
#   DEVLOG_WIDTH - Field width for label column (default: 16)
#   VERBOSE      - Enable verbose logging (0 or 1)
#
# Examples:
#   devlog "Simple message"
#   devlog info "install" "Installing package"
#   devlog warn "deprecated" "This feature is deprecated"
#   devlog error "failed" "Installation failed"
#   devlog debug "trace" "Debug information"
#   DEVLOG_WIDTH=26 devlog info "long label" "Custom width"
#
# Integration in scripts:
#   # Wrapper function for convenience
#   log() {
#     "$(dirname "$0")/../bin/devlog" info "$@"
#   }

set -eu

# Default field width for label column (can be overridden with DEVLOG_WIDTH)
FIELD_WIDTH=${DEVLOG_WIDTH:-16}

log_format() {
  label="${1:-}"
  message="${2:-}"
  color="${3:-}"

  # Treat empty string as "no message" (same as missing argument)
  if [ -z "$message" ] || [ "$#" -lt 2 ]; then
    # Single argument or empty message - just print it
    if [ -n "$color" ]; then
      printf "${color}%s$(tput sgr0)\n" "$label"
    else
      printf "%s\n" "$label"
    fi
  else
    # Two arguments - format with label and message
    if [ -n "$color" ]; then
      printf "${color}$(tput bold)%-${FIELD_WIDTH}s$(tput sgr0) %s\n" "$label" "$message"
    else
      printf "$(tput bold)%-${FIELD_WIDTH}s$(tput sgr0) %s\n" "$label" "$message"
    fi
  fi
}

# Parse arguments to determine level, label, and message
if [ "$#" -eq 0 ]; then
  echo "devlog: no arguments provided" >&2
  echo "Usage: devlog {info|warn|error|debug} <label> [message]" >&2
  echo "       devlog <message>" >&2
  exit 1
fi

# Check if first argument is a known level and canonicalize it
case "$1" in
info | warn | error | debug)
  level="$1"
  shift
  label="${1:-}"
  message="${2:-}"
  ;;
*)
  # First arg is not a level, treat as label with default level (info)
  level="info"
  label="$1"
  message=""
  ;;
esac

# Now execute based on level, passing clear parameters
case "$level" in
info)
  log_format "$label" "$message"
  ;;
warn)
  # Yellow text for warnings
  log_format "$label" "$message" "$(tput setaf 3)"
  ;;
error)
  # Red text for errors, output to stderr
  log_format "$label" "$message" "$(tput setaf 1)" >&2
  ;;
debug)
  # Only log if VERBOSE is set
  if [ "${VERBOSE:-0}" -eq 1 ]; then
    log_format "$label" "$message"
  fi
  ;;
esac
